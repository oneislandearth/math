{"version":3,"sources":["../src/index.js"],"names":["math","all","epsilon","phi","divide","add","sqrt","degree","pi","degrees","n","multiply","radian","radians","unit","norm","isZeroes","Array","isArray","zeroes","v","abs","length","angleBetween","vectors","a","b","subtract","vector","acos","dot","isNumber","BigNumber","toMeters","Meters","module","exports"],"mappings":"aACA,8BAGA,gCASA,KAAMA,CAAAA,IAAI,CAAG,mBAAOC,WAAP,CAAY,EAAZ,CAAb,CAGAD,IAAI,CAACE,OAAL,CAAe,IAAf,CAGAF,IAAI,CAACG,GAAL,CAAWH,IAAI,CAACI,MAAL,CAAYJ,IAAI,CAACK,GAAL,CAAS,CAAT,CAAYL,IAAI,CAACM,IAAL,CAAU,CAAV,CAAZ,CAAZ,CAAuC,CAAvC,CAAX,CAGAN,IAAI,CAACO,MAAL,CAAcP,IAAI,CAACI,MAAL,CAAY,GAAZ,CAAiBJ,IAAI,CAACQ,EAAtB,CAAd,CAGAR,IAAI,CAACS,OAAL,CAAgBC,CAAD,EAAOV,IAAI,CAACW,QAAL,CAAcD,CAAd,CAAiBV,IAAI,CAACO,MAAtB,CAAtB,CAGAP,IAAI,CAACY,MAAL,CAAcZ,IAAI,CAACI,MAAL,CAAYJ,IAAI,CAACQ,EAAjB,CAAqB,GAArB,CAAd,CAGAR,IAAI,CAACa,OAAL,CAAgBH,CAAD,EAAOV,IAAI,CAACW,QAAL,CAAcD,CAAd,CAAiBV,IAAI,CAACY,MAAtB,CAAtB,CAGAZ,IAAI,CAACc,IAAL,CAAaJ,CAAD,EAAOV,IAAI,CAACI,MAAL,CAAYM,CAAZ,CAAeV,IAAI,CAACe,IAAL,CAAUL,CAAV,CAAf,CAAnB,CAGAV,IAAI,CAACgB,QAAL,CAAiBN,CAAD,EAAO,CAGrBA,CAAC,CAAIO,KAAK,CAACC,OAAN,CAAcR,CAAd,CAAD,CAAqBA,CAArB,CAAwB,CAACA,CAAD,CAA5B,CAGA,GAAIS,CAAAA,MAAM,CAAG,CAAb,CAGA,IAAK,KAAMC,CAAAA,CAAX,GAAgBV,CAAAA,CAAhB,CAAmB,CAGjB,GAAIV,IAAI,CAACqB,GAAL,CAASD,CAAT,GAAepB,IAAI,CAACE,OAAxB,CAAiCiB,MAAM,EAAI,CAC5C,CAGD,MAAQA,CAAAA,MAAM,EAAIT,CAAC,CAACY,MACrB,CAjBD,CAoBAtB,IAAI,CAACuB,YAAL,CAAoB,CAAC,GAAGC,OAAJ,GAAgB,CAGlC,GAAIC,CAAAA,CAAC,CAAGD,OAAO,CAAC,CAAD,CAAf,CACA,GAAIE,CAAAA,CAAC,CAAGF,OAAO,CAAC,CAAD,CAAf,CAGA,GAAIA,OAAO,CAACF,MAAR,EAAkB,CAAtB,CAAyB,CAGvBG,CAAC,CAAGE,QAAQ,CAACC,MAAM,CAAC,CAAD,CAAP,CAAYA,MAAM,CAAC,CAAD,CAAlB,CAAZ,CAGAF,CAAC,CAAGC,QAAQ,CAACC,MAAM,CAAC,CAAD,CAAP,CAAYA,MAAM,CAAC,CAAD,CAAlB,CACb,CAGD,MAAOC,CAAAA,IAAI,CAACzB,MAAM,CAAC0B,GAAG,CAACL,CAAD,CAAIC,CAAJ,CAAJ,CAAYf,QAAQ,CAACI,IAAI,CAACU,CAAD,CAAL,CAAUV,IAAI,CAACW,CAAD,CAAd,CAApB,CAAP,CACZ,CAlBD,CAqBA1B,IAAI,CAAC+B,QAAL,CAAiBrB,CAAD,EAAQA,CAAC,GAAK,IAAN,GAAe,MAAQA,CAAAA,CAAR,EAAc,QAAd,EAA0B,MAAQA,CAAAA,CAAR,EAAc,QAAxC,EAAoDA,CAAC,WAAYV,CAAAA,IAAI,CAACgC,SAArF,CAAxB,CAGAhC,IAAI,CAACiC,QAAL,CAAiBvB,CAAD,EAAO,GAAIwB,eAAJ,CAAWxB,CAAX,CAAvB,CAGAyB,MAAM,CAACC,OAAP,CAAiBpC,IAAjB","sourcesContent":["// Import the mathjs configuration options\nimport { create, all } from 'mathjs';\n\n// Import the meters class\nimport { Meters } from './meters';\n\n// (roll out with for mathjs/7)\n// Congifure mathjs units\n// const math = create(all, {\n//   number: 'BigNumber'\n// });\n\n// Configue mathjs\nconst math = create(all, {});\n\n// Epislon / tolerance\nmath.epsilon = 1e-4;\n\n// Phi ratio / Golden ratio\nmath.phi = math.divide(math.add(1, math.sqrt(5)), 2);\n\n// Number of degrees in one radian\nmath.degree = math.divide(180, math.pi);\n\n// Calculate a value in degrees\nmath.degrees = (n) => math.multiply(n, math.degree);\n\n// Number of radians in one degree\nmath.radian = math.divide(math.pi, 180);\n\n// Calculate a value in radians\nmath.radians = (n) => math.multiply(n, math.radian);\n\n// Calculate the unit vector of a vector\nmath.unit = (n) => math.divide(n, math.norm(n));\n\n// Calculate the sum of a set of values\nmath.isZeroes = (n) => {\n\n  // Cast the value to an array if it isn't one\n  n = (Array.isArray(n)) ? n: [n];\n\n  // Store the count of zeroes\n  let zeroes = 0;\n\n  // Check each of the values is less than the epsilon\n  for (const v of n) {\n\n    // Return false if the number is greater than the epsilon\n    if (math.abs(v) <= math.epsilon) zeroes += 1;\n  }\n\n  // Return true as all numbers are less than the epsilon\n  return (zeroes == n.length);\n}\n\n// Calculate the angle between two or three vectors\nmath.angleBetween = (...vectors) => {\n\n  // Define the two vectors\n  let a = vectors[0];\n  let b = vectors[1];\n\n  // Check if there are three vectors (find angle located at b)\n  if (vectors.length == 3) {\n\n    // Calculate vector a\n    a = subtract(vector[0], vector[1]);\n\n    // Calculate vector b\n    b = subtract(vector[2], vector[1]);\n  }\n  \n  // Calculate and return the angle\n  return acos(divide(dot(a, b), multiply(norm(a), norm(b))));\n}\n\n// Check that a value a kind of number\nmath.isNumber = (n) => (n !== null && (typeof (n) == 'number' || typeof (n) == 'bigint' || n instanceof math.BigNumber));\n\n// Cast a number to Meters\nmath.toMeters = (n) => new Meters(n);\n\n// Export all math the functions (must use module.exports to prevent babel casting to default)\nmodule.exports = math;"],"file":"index.js"}