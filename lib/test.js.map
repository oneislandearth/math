{"version":3,"sources":["../src/test.js"],"names":["isEqual","require","math","app","test","values","map","equation","expected","console","log","eval","testMathJS"],"mappings":"aACA,KAAM,CAAEA,OAAF,EAAcC,OAAO,WAA3B,CAGA,KAAMC,CAAAA,IAAI,CAAGD,OAAO,UAApB,CAGA,KAAME,CAAAA,GAAG,CAAGF,OAAO,WAAnB,CAGA,KAAMG,CAAAA,IAAI,CAAIC,MAAD,EAAYA,MAAM,CAACC,GAAP,CAAW,CAAC,CAACC,QAAD,CAAWC,QAAX,CAAD,GAA0B,CAC5DC,OAAO,CAACC,GAAR,CAAa,GAAEH,QAAS,MAAKI,IAAI,CAAC,OAAOJ,QAAR,CAAkB,KAAKP,OAAO,CAACW,IAAI,CAAC,OAAOJ,QAAR,CAAL,CAAwBC,QAAxB,CAAP,CAA2C,QAA3C,CAAsD,QAAU,GAAxH,CACD,CAFwB,CAAzB,CAIA,KAAMI,CAAAA,UAAU,CAAIP,MAAD,EAAYA,MAAM,CAACC,GAAP,CAAWC,QAAQ,EAAI,CACpDE,OAAO,CAACC,GAAR,CAAa,GAAEH,QAAS,MAAKI,IAAI,CAAC,OAAOJ,QAAR,CAAkB,KAAKP,OAAO,CAACW,IAAI,CAAC,OAAOJ,QAAR,CAAL,CAAwBI,IAAI,CAAC,QAAQJ,QAAT,CAA5B,CAAP,CAAyD,QAAzD,CAAoE,WAAYI,IAAI,CAAC,QAAQJ,QAAT,CAAoB,GAAhK,CACD,CAF8B,CAA/B,CAKAH,IAAI,CAAC,CACH,CAAC,WAAD,CAAc,EAAd,CADG,CAEH,CAAC,YAAD,CAAe,CAAf,CAFG,CAGH,CAAC,aAAD,CAAgB,CAAC,EAAjB,CAHG,CAIH,CAAC,iBAAD,CAAoB,CAAC,EAArB,CAJG,CAKH,CAAC,eAAD,CAAkB,GAAlB,CALG,CAMH,CAAC,yBAAD,CAA4B,CAAC,EAAD,CAAK,EAAL,CAA5B,CANG,CAOH,CAAC,6BAAD,CAAgC,CAAC,GAAD,CAAM,GAAN,CAAhC,CAPG,CASH,CAAC,gBAAD,CAAmB,CAAnB,CATG,CAUH,CAAC,iBAAD,CAAoB,CAAC,EAArB,CAVG,CAWH,CAAC,kBAAD,CAAqB,CAArB,CAXG,CAYH,CAAC,sBAAD,CAAyB,CAAzB,CAZG,CAaH,CAAC,oBAAD,CAAuB,GAAvB,CAbG,CAcH,CAAC,8BAAD,CAAiC,CAAC,CAAD,CAAI,CAAJ,CAAjC,CAdG,CAeH,CAAC,kCAAD,CAAqC,CAAC,CAAC,GAAF,CAAO,GAAP,CAArC,CAfG,CAiBH,CAAC,iBAAD,CAAoB,CAAC,CAAC,CAAF,CAAK,CAAL,CAApB,CAjBG,CAkBH,CAAC,YAAD,CAAe,CAAC,EAAhB,CAlBG,CAAD,CAAJ,CAqBAQ,UAAU,CAAC,CACT,mCADS,CAAD,CAAV","sourcesContent":["// Import the isEqual function\nconst { isEqual } = require('./utils');\n\n// Import mathjs\nconst math = require('mathjs');\n\n// Import the required functions\nconst app = require('./index');\n\n// Perform testing\nconst test = (values) => values.map(([equation, expected]) => {\n  console.log(`${equation} = ${eval('app.'+equation)} (${(isEqual(eval('app.'+equation), expected) ? 'Passed' : 'Failed')})`);\n});\n\nconst testMathJS = (values) => values.map(equation => {\n  console.log(`${equation} = ${eval('app.'+equation)} (${(isEqual(eval('app.'+equation), eval('math.'+equation)) ? 'Passed' : 'Failed: '+ eval('math.'+equation))})`);\n});\n\n// Perform all the tests\ntest([\n  ['add(5, 5)', 10], // positive and positive\n  ['add(-5, 5)', 0], // negative and positive\n  ['add(-5, -5)', -10], // double negative\n  ['add(-5, -5, -5)', -15], // more than two\n  ['add(0.1, 0.2)', 0.3], // floating decimals\n  ['add([10, 10], [10, 10])', [20, 20]], // vector and vector\n  ['add([0.1, 0.2], [0.2, 0.1])', [0.3, 0.3]], // vector and vector floating decimals\n\n  ['subtract(5, 5)', 0], // positive and positive\n  ['subtract(-5, 5)', -10], // negative and positive\n  ['subtract(-5, -5)', 0], // double negative\n  ['subtract(-5, -5, -5)', 5], // more than two\n  ['subtract(0.1, 0.2)', 0.3], // floating decimals\n  ['subtract([10, 10], [10, 10])', [0, 0]], // vector and vector\n  ['subtract([0.1, 0.2], [0.2, 0.1])', [-0.1, 0.1]], // vector and vector floating decimals\n\n  ['negate([5, -5])', [-5, 5]],\n  ['negate(10)', -10],\n]);\n\ntestMathJS([\n  'cross([10, 20, -30], [20, 30 -8])'\n\n])"],"file":"test.js"}